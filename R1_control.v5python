{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\n\nbrain=Brain()\n\nvision_20__SIG_1 = Signature(1, -6525, -6011, -6268,-5617, -5049, -5334,11, 0)\nvision = Vision(Ports.PORT14, 50, vision_20__SIG_1)\ncontroller = Controller()\n\nleft_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nleft_wheels = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_wheels = MotorGroup(right_motor_a, right_motor_b)\nroller = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nroller.set_velocity(60, PERCENT)\narm_left = Motor(Ports.PORT6, GearSetting.RATIO_18_1, True)\narm_right = Motor(Ports.PORT13, GearSetting.RATIO_18_1, True)\narm = MotorGroup(arm_left, arm_right)\narm.set_max_torque(100, PERCENT)\narm.set_velocity(20, PERCENT)\narm.set_stopping(HOLD)\nhammer = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nhammer.set_max_torque(100, PERCENT)\nhammer.set_velocity(30, PERCENT)\n# drivetrain_gps = Gps(Ports.PORT11, 75.00, 150.00, MM, 180)\ndriver = DriveTrain(left_wheels, right_wheels, 319.19, 320, 40, MM, 1)\ndriver.set_drive_velocity(65, PERCENT)\ndriver.set_turn_velocity(15, PERCENT)\ndriver.set_stopping(COAST)\nleft_wing = Motor(Ports.PORT15, GearSetting.RATIO_18_1, False)\nright_wing = Motor(Ports.PORT5, GearSetting.RATIO_18_1, True)\nwings = MotorGroup(left_wing, right_wing)\nwings.set_max_torque(100, PERCENT)\nwings.set_velocity(40, PERCENT)\nwings.set_timeout(1, SECONDS)\nis_arrived = False \nglobal is_wings_open\nis_wings_open = False\n\nis_wings_spin = 0\n\n\n\n\ndef thread_wings_open():\n    global is_wings_open\n    right_wing.spin_for(REVERSE, 200, DEGREES)\n    is_wings_open = True\n\ndef thread_wings_close():\n    brain.screen.set_cursor(3,1)\n    brain.screen.print('sdfsdfsfdsdfdfs')\n    global is_wings_open\n    right_wing.spin_for(FORWARD, 200, DEGREES)\n    is_wings_open = False\n\n#1500o\nwhile True:\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(brain.timer.time(SECONDS))\n    if controller.buttonUp.pressing():\n        arm.spin(FORWARD)\n    elif controller.buttonDown.pressing():\n        arm.spin(REVERSE)\n    else:\n        arm.stop()\n\n    if controller.buttonX.pressing()and not is_wings_open:\n        #right_wing.spin_for(REVERSE, 200, DEGREES)\n        is_wings_spin = -1\n        brain.timer.clear()\n        is_wings_open = not is_wings_open\n    elif controller.buttonY.pressing() and is_wings_open:\n        # right_wing.spin_for(FORWARD, 200, DEGREES)\n        is_wings_spin = 1\n        brain.timer.clear()\n        is_wings_open = not is_wings_open\n\n    if is_wings_spin == -1 :\n        left_wing.spin(REVERSE)\n        if brain.timer.time(SECONDS) > 0.6:\n            left_wing.stop()\n            is_wings_spin = 0\n    \n    if is_wings_spin == 1 :\n        left_wing.spin(FORWARD)\n        if brain.timer.time(SECONDS) > 0.6:\n            left_wing.stop()\n            is_wings_spin = 0\n\n    if controller.buttonA.pressing():\n        hammer.spin_for(FORWARD, 1500, DEGREES)\n    elif controller.buttonB.pressing():\n        hammer.spin_for(FORWARD, 300, DEGREES)\n    else:\n        hammer.stop()\n\n    if controller.buttonR1.pressing():\n        roller.spin(FORWARD)\n    elif controller.buttonR2.pressing():\n        roller.spin(REVERSE)\n    else:\n        roller.stop()\n\n    left_velocity = 0\n    right_velocity = 0\n    v = controller.axis3.position()*1.25\n    h = controller.axis1.position()*.75\n\n    #if abs(v) > 10 and abs(h) > 10 :\n\n    left_velocity = v + h\n    right_velocity = v - h\n\n    left_wheels.set_velocity(left_velocity, RPM)\n    right_wheels.set_velocity(right_velocity, RPM)\n    left_wheels.spin(FORWARD)\n    right_wheels.spin(FORWARD)\n    \n\n    '''\n    if v > 10:\n        left_velocity = v\n        right_velocity = v\n        if h > 10:\n            left_velocity += abs(h)\n        elif h < -10:\n            right_velocity += abs(h)\n        else:\n            pass\n        left_wheels.set_velocity(left_velocity, RPM)\n        right_wheels.set_velocity(right_velocity, RPM)\n        left_wheels.spin(FORWARD)\n        right_wheels.spin(FORWARD)\n    elif v < -10:\n        driver.drive(REVERSE, 120, RPM)\n    else:\n        if h > 10:\n            driver.turn(RIGHT)\n        elif h < -10:\n            driver.turn(LEFT)\n        else:\n            driver.stop()\n    '''\n\n    if controller.buttonL2.pressing():\n        left_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1,False)\n        left_motor_b = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n        left_wheels = MotorGroup(left_motor_a, left_motor_b)\n        right_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\n        right_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\n        right_wheels = MotorGroup(right_motor_a, right_motor_b)\n        driver = DriveTrain(left_wheels, right_wheels, 319.19, 320, 40, MM, 1)\n\n    if controller.buttonL1.pressing():\n        left_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\n        left_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\n        left_wheels = MotorGroup(left_motor_a, left_motor_b)\n        right_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\n        right_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n        right_wheels = MotorGroup(right_motor_a, right_motor_b)\n        driver = DriveTrain(left_wheels, right_wheels, 319.19, 320, 40, MM, 1)\n\n\n\n        \n\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}